@page "/coupons"
@rendermode InteractiveServer
@attribute [StreamRendering]

@inject ICouponService _service
@inject IJSRuntime _js

<PageTitle>Coupons</PageTitle>

<h1>Coupons</h1>

<p></p>

@if (_items is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-sm table-bordered table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Code</th>
                <th>Discount Amount</th>
                <th>Min Amount</th>
                <th>
                    <a class="btn btn-sm btn-primary" href="/coupon/create">Create</a>
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in _items ?? Enumerable.Empty<CouponDto>())
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.Code</td>
                    <td>@item.DiscountAmount</td>
                    <td>@item.MinAmount</td>
                    <td>
                        @* <a class="btn btn-outline-info" href="/coupon/@(item.Id.ToString())">Details</a> *@
                        <a class="btn btn-sm btn-info" href="@getDetailsUrl(item.Id)">Details</a>
                        <a class="btn btn-sm btn-warning" href="@getEditUrl(item.Id)">Edit</a>
                        <button class="btn btn-sm btn-danger" @onclick="@(async () => await delete(item.Id))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private List<CouponDto>? _items = new();
    ResponseDto? _response = null;

    protected override async Task OnInitializedAsync()
    {
        _response = await _service.GetAllAsync();
        if (_response is not null && _response.IsSuccessful)
        {
            _items = JsonConvert.DeserializeObject<List<CouponDto>>(Convert.ToString(_response.Result)!);
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await load();
    }

    private async Task load()
    {
        _response = await _service.GetAllAsync();
        if (_response is not null && _response.IsSuccessful)
        {
            _items = JsonConvert.DeserializeObject<List<CouponDto>>(Convert.ToString(_response.Result)!);
        }
        else
        {
            if (_response is null)
            {
                await _js.ToastrError("Error");
            }
            else
            {
                await _js.ToastrError(_response.Message);
            }
        }
    }

    private async Task delete(int id)
    {
        if (await _js.InvokeAsync<bool>("confirm", "Are you sure deleting this item?"))
        {
            var response = await _service.DeleteAsync(id);
            if (response is not null && response.IsSuccessful)
            {
                await load();
            }
            else
            {
                await _js.ToastrError(response!.Message);
            }
        }
    }

    private string getDetailsUrl(int id) => $"/coupon/{id.ToString()}";
    private string getEditUrl(int id) => $"/coupon/edit/{id.ToString()}";
}
