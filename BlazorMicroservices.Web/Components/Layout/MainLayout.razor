@inherits LayoutComponentBase

@* @inject CurrentUserService _currentUserService *@
@* @inject AuthenticationStateProvider _authenticationStateProvider *@

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <a href="https://learn.microsoft.com/aspnet/core/" target="_blank">About</a>

            <CascadingAuthenticationState>
                <AuthorizeView>
                    <Authorized>
                        <a style="text-decoration: none;">
                            @* Welcome @context!.User!.Identity!.Name *@
                            @* Welcome @(_currentUserService == null ? "" : _currentUserService.User == null ? "" : _currentUserService.User.UserName) *@
                            Welcome @_userName
                        </a>
                        @* <a style="text-decoration: none;">Welcome @userName</a> *@
                        <a href="logout">Logout</a>
                    </Authorized>
                    <NotAuthorized>
                        <a href="register">Register</a>
                        <a href="login">Login</a>
                    </NotAuthorized>
                </AuthorizeView>
            </CascadingAuthenticationState>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    [Inject] public AuthenticationStateProvider _authenticationStateProvider { get; set; }

    private string _userName { get; set; } = string.Empty;

    protected async override Task OnInitializedAsync()
    {
        var authstate = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var userNameClaim = authstate.User.Claims.SingleOrDefault(x => x.Type == "userName");
        if (userNameClaim is not null)
        {
            _userName = userNameClaim!.Value;
        }

        // var authState = await AuthState;
        // var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();

        // var userNameClaim = authState.User.Claims.SingleOrDefault(x => x.Type == "UserName");
        // if (userNameClaim is not null)
        // {
        //     userName = userNameClaim!.Value;
        //     // var user = authstate.User;
        //     // var name = user.Identity.Name;
        // }
    }
}